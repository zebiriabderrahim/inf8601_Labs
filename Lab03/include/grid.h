/* DO NOT EDIT THIS FILE */

#ifndef INCLUDE_GRID_H_
#define INCLUDE_GRID_H_

#include <stdio.h>
#include <stdlib.h>

typedef struct grid {
    /* do not modify this data directly */
    double* data;

    /* dimensions */
    unsigned int width;
    unsigned int height;

    /* dimensions with padding */
    unsigned int padding;
    unsigned int width_padded;
    unsigned int height_padded;
} grid_t;

grid_t* grid_create(unsigned int width, unsigned int height, unsigned int padding);
void grid_destroy(grid_t* grid);

grid_t* grid_clone(grid_t* grid);
grid_t* grid_clone_with_padding(grid_t* grid, unsigned int padding);

int grid_copy_data(grid_t* src, grid_t* dst);
int grid_copy_block(grid_t* src, unsigned int x1, unsigned int y1, unsigned int w, unsigned int h, grid_t* dst,
                    unsigned int x2, unsigned int y2);
int grid_copy_inner_border(grid_t* src, grid_t* dst);

int grid_set(grid_t* grid, double value);
int grid_set_min(grid_t* min, grid_t* dst);
int grid_set_padding_from_inner_bound(grid_t* grid);

int grid_multiply(grid_t* grid, double factor);
double grid_max(grid_t* grid);

int grid_fdump(grid_t* grid, char* prefix, FILE* file);

static inline double* grid_get_cell(grid_t* grid, int i, int j) {
    /* allow negative coordinates in order to access padding */
    int padding      = grid->padding;
    int width_padded = grid->width_padded;
    return &grid->data[(i + padding) + (j + padding) * width_padded];
}

static inline double* grid_get_cell_padded(grid_t* grid, unsigned int i, unsigned int j) {
    int width_padded = grid->width_padded;
    return &grid->data[i + j * width_padded];
}

#endif /* INCLUDE_GRID_H_ */
