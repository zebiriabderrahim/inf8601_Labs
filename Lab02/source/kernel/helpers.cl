/* DO NOT EDIT THIS FILE */

#ifndef M_PI
#define M_PI 3.14159265358979323846264338328
#endif

typedef struct pixel {
    unsigned char bytes[3];
} pixel_t;

__constant const pixel_t pixel_white = {.bytes = {255, 255, 255}};
__constant const pixel_t pixel_black = {.bytes = {0, 0, 0}};

void color_value(pixel_t* pixel, float value, int interval, float interval_inverse) {
    pixel_t pixel_value;

    if (isnan(value)) {
        pixel_value = pixel_black;
        goto done;
    }

    int x = (((int)value % interval) * 255) * interval_inverse;
    int i = value * interval_inverse;

    switch (i) {
    case 0:
        pixel_value.bytes[0] = 0;
        pixel_value.bytes[1] = x;
        pixel_value.bytes[2] = 255;
        break;
    case 1:
        pixel_value.bytes[0] = 0;
        pixel_value.bytes[1] = 255;
        pixel_value.bytes[2] = 255 - x;
        break;
    case 2:
        pixel_value.bytes[0] = x;
        pixel_value.bytes[1] = 255;
        pixel_value.bytes[2] = 0;
        break;
    case 3:
        pixel_value.bytes[0] = 255;
        pixel_value.bytes[1] = 255 - x;
        pixel_value.bytes[2] = 0;
        break;
    case 4:
        pixel_value.bytes[0] = 255;
        pixel_value.bytes[1] = 0;
        pixel_value.bytes[2] = x;
        break;
    default:
        pixel_value = pixel_white;
        break;
    }

done:
    *pixel = pixel_value;
}