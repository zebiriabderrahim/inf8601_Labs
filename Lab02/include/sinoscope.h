/* DO NOT EDIT THIS FILE */

#ifndef INCLUDE_SINOSCOPE_H_
#define INCLUDE_SINOSCOPE_H_

#include "opencl.h"

typedef struct sinoscope_opencl {
    cl_device_id device_id;
    cl_context context;
    cl_command_queue queue;
    cl_mem buffer;
    cl_kernel kernel;
} sinoscope_opencl_t;

typedef struct sinoscope sinoscope_t;
typedef int (*sinoscope_handler)(sinoscope_t* sinoscope);

typedef struct sinoscope {
    const char* name;
    sinoscope_handler handler;

    unsigned int buffer_size;
    unsigned char* buffer;

    unsigned int width;
    unsigned int height;
    unsigned int taylor;

    unsigned int interval;
    float interval_inverse;

    float time;
    float max;
    float phase0;
    float phase1;
    float dx;
    float dy;

    sinoscope_opencl_t* opencl;
} sinoscope_t;

sinoscope_t* sinoscope_create(char* name, sinoscope_handler handler, unsigned int width, unsigned int height,
                              float max);
void sinoscope_destroy(sinoscope_t* sinoscope);
int sinoscope_corners(sinoscope_t* sinoscope);
int sinoscope_check(unsigned int width, unsigned int height, unsigned int taylor, float max,
                    sinoscope_opencl_t* opencl);
int sinoscope_benchmarks(unsigned int width, unsigned int height, unsigned int taylor, float max,
                        sinoscope_opencl_t* opencl, unsigned int iterations);

int sinoscope_benchmark(sinoscope_t* sinoscope, unsigned int iterations);

int sinoscope_image_serial(sinoscope_t* sinoscope);
int sinoscope_image_openmp(sinoscope_t* sinoscope);
int sinoscope_image_opencl(sinoscope_t* sinoscope);

int sinoscope_opencl_init(sinoscope_opencl_t* opencl, cl_device_id opencl_device_id, unsigned int width,
                          unsigned int height);
void sinoscope_opencl_cleanup(sinoscope_opencl_t* opencl);

int sinoscope_save_image(sinoscope_t* sinoscope, char* filename);

#endif /* INCLUDE_SINOSCOPE_H_ */
